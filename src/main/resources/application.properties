# Info
info.application.artifactId=@project.artifactId@
info.application.name=@project.name@
info.application.version=@project.version@
info.application.description=@project.description@
info.properties.environment=${ENV:azure}

# Actuator
management.endpoints.web.exposure.include=health,info
management.endpoints.jmx.exposure.include=health,info
management.info.env.enabled=true
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

# Openapi
springdoc.writer-with-order-by-keys=true
springdoc.writer-with-default-pretty-printer=true
springdoc.api-docs.groups.enabled=true
springdoc.group-configs[0].group=external
springdoc.group-configs[0].displayName=Payment Notice Service (External)
springdoc.group-configs[0].paths-to-match=/notices/templates/**,/notices/folder/**,/notices/generate,/notices/generate-massive

# Server
server.servlet.context-path=/
server.port=8080
server.shutdown=GRACEFUL

# Logging
logging.level.root=${DEFAULT_LOGGING_LEVEL:INFO}
logging.level.it.gov.pagopa=${APP_LOGGING_LEVEL:INFO}

# Feign Client
spring.cloud.openfeign.client.config.default.logger-level=${REST_CLIENT_LOGGER_LEVEL:FULL}
spring.cloud.openfeign.client.config.default.connectTimeout=${REST_CLIENT_CONNECT_TIMEOUT:200000}
spring.cloud.openfeign.client.config.default.readTimeout=500000

# CORS configuration
cors.configuration=${CORS_CONFIGURATION:{"origins": ["*"], "methods": ["*"]}}

# Cache configuration
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=${CACHE_SIZE:1000}, expireAfterWrite=${CACHE_EXPIRATION_TIME:720m}
cache.enabled=${CACHE_ENABLED:true}

# Jackson serialization
spring.jackson.default-property-inclusion=NON_NULL
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.deserialization.fail-on-unknown-properties=false

# Mongo Configuration
spring.data.mongodb.uri=${MONGODB_CONNECTION_URI}
spring.data.mongodb.database=${MONGODB_NAME:noticesMongoDb}

# Storage Account Configuration
spring.cloud.azure.storage.blob.notices.enabled=${NOTICE_STORAGE_ENABLED:true}
spring.cloud.azure.storage.blob.notices.endpoint=${NOTICE_STORAGE_ENDPOINT}
spring.cloud.azure.storage.blob.notices.clientId=${NOTICE_STORAGE_CLIENT_ID}
spring.cloud.azure.storage.blob.notices.tenantId=${NOTICE_STORAGE_TENANT_ID}
spring.cloud.azure.storage.blob.notices.clientSecret=${NOTICE_STORAGE_CLIENT_SECRET}
spring.cloud.azure.storage.blob.notices.containerName=${NOTICE_STORAGE_CONTAINER_NAME:notices}

spring.cloud.azure.storage.blob.templates.enabled=${TEMPLATE_STORAGE_ENABLED:true}
spring.cloud.azure.storage.blob.templates.connection_string=${TEMPLATE_STORAGE_CONN_STRING}
spring.cloud.azure.storage.blob.templates.containerName=${TEMPLATE_STORAGE_CONTAINER_NAME:noticetemplateblob}
spring.cloud.azure.storage.blob.templates.tableName=${TEMPLATE_STORAGE_CONTAINER_NAME:noticetemplatedatatable}
spring.cloud.azure.storage.blob.templates.retry=${TEMPLATE_STORAGE_RETRY:3}
spring.cloud.azure.storage.blob.templates.timeout=${TEMPLATE_STORAGE_TIMEOUT:10}

spring.cloud.azure.storage.blob.institutions.enabled=${INSTITUTION_STORAGE_ENABLED:true}
spring.cloud.azure.storage.blob.institutions.connection_string=${INSTITUTION_STORAGE_CONN_STRING:}
spring.cloud.azure.storage.blob.institutions.containerName=${INSTITUTION_STORAGE_CONTAINER_NAME:institutionsdatablob}
spring.cloud.azure.storage.blob.institutions.logoContainerName=${INSTITUTION_LOGO_STORAGE_CONTAINER_NAME:institutionslogoblob}


# EH Kafka Configuration
spring.cloud.function.definition=noticeGeneration
spring.cloud.stream.bindings.noticeGeneration-out-0.destination=${KAFKA_NOTICE_GENERATION_TOPIC:pagopa-printit-evh}
spring.cloud.stream.bindings.noticeGeneration-out-0.content-type=${KAFKA_CONTENT_TYPE:application/json}
spring.cloud.stream.bindings.noticeGeneration-out-0.binder=notice-generation
spring.cloud.stream.binders.notice-generation.type=kafka
spring.cloud.stream.binders.notice-generation.environment.spring.cloud.stream.kafka.binder.brokers=${KAFKA_BROKER}
spring.cloud.stream.binders.notice-generation.environment.spring.cloud.stream.kafka.binder.configuration.sasl.jaas.config=${KAFKA_SASL_JAAS_CONFIG}
spring.cloud.stream.binders.notice-generation.environment.spring.cloud.stream.kafka.binder.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.binder.auto-create-topics=false
spring.cloud.stream.kafka.binder.configuration.heartbeat.interval.ms=${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
spring.cloud.stream.kafka.binder.configuration.session.timeout.ms=${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
spring.cloud.stream.kafka.binder.configuration.request.timeout.ms=${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
spring.cloud.stream.kafka.binder.configuration.sasl.mechanism=${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
spring.cloud.stream.kafka.binder.configuration.security.protocol=${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
spring.cloud.stream.kafka.binder.configuration.connections.max.idle.ms=${KAFKA_CONFIG_CONNECTION_MAX_IDLE_TIME:180000}
spring.cloud.stream.kafka.binder.configuration.metadata.max.idle.ms=${KAFKA_CONFIG_METADATA_MAX_IDLE_MS:180000}
spring.cloud.stream.kafka.binder.configuration.metadata.max.age.ms=${KAFKA_CONFIG_METADATA_MAX_AGE_INTERVAL:179000}
spring.cloud.stream.kafka.binder.configuration.max.request.size=${KAFKA_CONFIG_METADATA_MAX_REQUEST_SIZE:1000000}
spring.cloud.stream.kafka.bindings.noticeGeneration-out-0.producer.configuration.client.id=noticeGenProducer
spring.cloud.stream.kafka.bindings.noticeGeneration-out-0.producer.configuration.connections.max.idle.ms=${KAFKA_REWARD_RESPONSE_CONNECTION_MAX_IDLE_TIME:180000}
spring.cloud.stream.kafka.bindings.noticeGeneration-out-0.producer.configuration.retry.backoff.ms=${KAFKA_REWARD_RESPONSE_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
spring.cloud.stream.kafka.bindings.noticeGeneration-out-0.producer.configuration.linger.ms=${KAFKA_REWARD_RESPONSE_LINGER_MS:${KAFKA_LINGER_MS:2}}
spring.cloud.stream.kafka.bindings.noticeGeneration-out-0.producer.configuration.batch.size=${KAFKA_REWARD_RESPONSE_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}

#Other Configs
aes.secret.key=${AES_SECRET_KEY}
aes.salt=${AES_SALT}
notice.check.page.limit=${ALLOWANCE_CHECK_PAGE_LIMIT:50}

#Notice Generation API
rest-client.notice-generation.base-url=${NOTICE_GENERATION_REST_ENDPOINT}
authorization.notice.generator.subscriptionKey=${NOTICE_GENERATION_SUBSCRIPTION_KEY}
rest-client.api-config.base-url=${API_CONFIG_REST_ENDPOINT}
authorization.api-config.subscriptionKey=${API_CONFIG_SUBSCRIPTION_KEY}


